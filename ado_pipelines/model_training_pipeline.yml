# Model training pipeline that orchestrates the training, evaluation, and registration of the model.

resources:
  containers:
  - container: mlops
    image: mcr.microsoft.com/mlops/python:latest

pr: none
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/pipeline

variables:
- template: variables/pipeline_variables.yml
- group: devopsforai-aml-vg

pool:
  vmImage: ubuntu-latest

stages:
- stage: 'Model_Training_CI_Stage'
  displayName: 'Model Training CI Stage'
  jobs:
  - job: "Build_Publish_AML_Pipeline"
    displayName: "Build and Publish AML Pipeline"
    container: mlops
    timeoutInMinutes: 0
    steps:
    # - template: templates/code_quality_template.yml
    - bash: |
        echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add Conda to PATH
      enabled: true
      condition: succeededOrFailed()
    - bash: |
        conda init bash
        conda env create --file $(paramCondaTrainEnvFilePath)
        
        source activate $(paramCondaTrainEnvName)
        conda deactivate
      displayName: Create Conda Training Environment
      condition: succeededOrFailed()
    - task: AzureCLI@1
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)
        inlineScript: |
          echo SOURCES_DIRECTORY=$(Build.SourcesDirectory)
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          # Activate conda training environment
          source activate $(paramCondaTrainEnvName)
          # Invoke the Python building and publishing a training pipeline
          python src/pipeline/build_train_pipeline.py
      displayName: 'Build and Publish AML Pipeline'

- stage: 'Model_Training_CD_Stage'
  displayName: 'Model Training CD Stage'
  condition: succeeded()
  variables:
    BUILD_URI: '$(SYSTEM.COLLECTIONURI)$(SYSTEM.TEAMPROJECT)/_build/results?buildId=$(BUILD.BUILDID)'
  jobs:
  - job: "Get_Pipeline_ID"
    condition: and(succeeded(), eq(coalesce(variables['auto-trigger-training'], 'true'), 'true'))
    displayName: "Get Published Training Pipeline ID"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@1
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python src/pipeline/run_train_pipeline.py --output_pipeline_id_file "pipeline_id.txt" --skip_train_execution
          # Set AMLPIPELINEID variable for next AML Pipeline task in next job
          AMLPIPELINEID="$(cat pipeline_id.txt)"
          echo "##vso[task.setvariable variable=AMLPIPELINEID;isOutput=true]$AMLPIPELINEID"
      name: 'Get_Pipeline_ID'
      displayName: 'Get Published Training Pipeline ID'
  - job: "Run_Published_Training_Pipeline"
    dependsOn: "Get_Pipeline_ID"
    displayName: "Run Published Training Pipeline"
    timeoutInMinutes: 0
    pool: server
    variables:
      AMLPIPELINE_ID: $[ dependencies.Get_Pipeline_ID.outputs['getpipelineid.AMLPIPELINEID'] ]
    steps:
    - task: ms-air-aiagility.vss-services-azureml.azureml-restApi-task.MLPublishedPipelineRestAPITask@0
      displayName: 'Invoke Training Pipeline'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        PipelineId: '$(AMLPIPELINE_ID)'
        ExperimentName: '$(EXPERIMENT_NAME)'
        PipelineParameters: '"ParameterAssignments": {"model_name": "$(MODEL_NAME)"}, "tags": {"BuildId": "$(Build.BuildId)", "BuildUri": "$(BUILD_URI)"}, "StepTags": {"BuildId": "$(Build.BuildId)", "BuildUri": "$(BUILD_URI)"}'
  - job: "Publish_Model_Artifact"
    dependsOn: "Run_Published_Training_Pipeline"
    condition: always()
    displayName: "Publish Newly Registered Model Artifact"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - template: templates/publish_model_artifact_template.yml
